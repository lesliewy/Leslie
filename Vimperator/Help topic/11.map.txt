Key mappings, abbreviations, and user-defined commands
Contents
Key mapping
Map commandsS
pecial arguments
Key sequences
Special characters
Abbreviations
User-defined commands
Examples

key-mappingmappingmapmacroKey mapping
    The key mapping commands can be used to either redefine the standard key
    bindings or define new ones. A mapping consists of a key, or key-sequence,
    which is translated to a string of characters. Example:

:map  :echo new Date().toDateString()
    will echo the current date to the command line when <F2> is pressed.

:map-modes
    Keys can be mapped in four distinct modes:
    Normal mode: When browsing normally
    Visual mode: When selecting text with the cursor keys
    Insert mode: When interacting with text fields on a website
    Command-line mode: When typing into the Vimperator command line

Warning: 
    Mappings are NOT saved between sessions, make sure you put them in your
    vimperatorrc file!

Map commands
:map:map {lhs} {rhs}:nm:nmap:nm[ap] {lhs} {rhs}:vm:vmap:vm[ap] {lhs} {rhs}:im:imap:im[ap] {lhs} {rhs}:cm:cmap:cm[ap] {lhs} {rhs}
            Map the key-sequence {lhs} to {rhs} for the applicable mode(s). The {rhs} is
            remapped, allowing for nested and recursive mappings.

:no:noremap:no[remap] {lhs} {rhs}:nn:nnoremap:nn[oremap] {lhs} {rhs}:vn:vnoremap:vn[oremap] {lhs} {rhs}:ino:inoremap:ino[remap] {lhs} {rhs}:cno:cnoremap:cno[remap] {lhs} {rhs}
            Map the key-sequence {lhs} to {rhs} for the applicable mode(s). No remapping of
            the {rhs} is performed.

:unm:unmap:map {lhs} {rhs}:nun:nunmap:nun[map] {lhs} {rhs}:vun:vunmap:vun[map] {lhs} {rhs}:iu:iunmap:iu[nmap] {lhs} {rhs}:cu:cunmap:cu[nmap] {lhs} {rhs}
        Remove the mapping of {lhs} for the applicable mode(s).
    
:mapc:mapclear:mapc[lear]:nmapc:nmapclear:nmapc[lear]:vmapc:vmapclear:vmapc[lear]:imapc:imapclear:imapc[lear]:cmapc:cmapclear:cmapc[lear]
            Remove all mappings for the applicable mode(s). All user-defined mappings are
            cleared.

:map:nm[ap]:vm[ap]:im[ap]:cm[ap]
        List all mappings for the applicable mode(s).

:map_l:map {lhs}:nmap_l:nm[ap] {lhs}:vmap_l:vm[ap] {lhs}:imap_l:im[ap] {lhs}:cmap_l:cm[ap] {lhs}
        List all mappings starting with {lhs} for the applicable mode(s).
    



:map-argumentsSpecial arguments

:map-<silent>


    When the first argument to one of the mapping commands is <silent>,
    {rhs} is not echoed to the command line, nor, for that matter, anything
    else until the command has completed.



:map-urls


    The mapping becomes an effective mapping only on the page specifed by {urlpattern},
    if {-urls={urlpattern}} is given to a mappings command.
    {urlpattern} must be regular expression.




    Below is an overview of which modes each map command applies to:





:map   :noremap   :unmap   :mapclear  每 both Normal and Visual modes
:nmap  :nnoremap  :nunmap  :nmapclear 每 Normal mode
:vmap  :vnoremap  :vunmap  :vmapclear 每 Visual mode
:imap  :inoremap  :iunmap  :imapclear 每 Insert mode
:cmap  :cnoremap  :cunmap  :cmapclear 每 Command-line mode


key-notation,key-sequenceKey sequences


    For most keys, the key-sequence is the same as the character you see when you
    type that key, however there are some exceptions which allow for a much larger
    number of keys to be used in mappings.



    <lt>, <, <Space>, \  allow a literal < or space character.
    ', " and \ must be used to avoid escaping issues when mapping a quote or backslash.
    
        <Left> <Right> <Up>
        <Down> <PageUp> <PageDown>
        <Esc> <CR> (for carriage return/enter)
    
    <CapsLock> <NumLock> <Ins> <Del> <Tab> <BS> (for a backspace)
    <F1> through <F12> work as expected



    Most keyboards have some modifiers such as the control, alt or meta keys. In
    order to create a mapping that uses these keys the correct prefix must be used
    within the angle brackets.



    <C-x>: The control or ctrl key.
    <A-x>: The alt key.
    <M-x>: The meta key, windows key, or command key
    <S-x>: The shift key.



    These prefixes can be combined however you see fit, though you should note that
    within angle brackets all alphabetic characters are read as lowercase. In order
    to force them to be uppercase, you must specify the S- prefix as well.
    Additionally, you should never use the S- prefix with a number or piece of
    punctuation, even if you require a shift to type that character; doing so will
    give you a mapping that cannot be typed. With non-character keys, tab and
    space, the S- modifier works just like C- A- and M-. Some examples may clarify
    the situation:



    xc: type x, and then type c
    <C-x>c: hold control and type x, then type c without control
    <C-2>: type 2 while holding control
    <C-@>: type @ while holding control
    <S-Space>: press space while holding shift
    <C-A-j>: press j while holding control and alt
    <C-A-J>: exactly the same as above
    <C-A-S-j>: press J while holding control and alt


:map-special-charsSpecial characters

<Nop><Nop>
        
            Do nothing. This command is useful for disabling a specific mapping.
            :map   will prevent <C-n> from doing anything.
        
    


<CR>map_return<CR>
        
            Expand to a line terminator in a key mapping. An Ex command in the {rhs} of a
            mapping requires a line terminator after it so that it is executed when the
            mapping is expanded. <CR> should be used for this purpose.
        
    


<Leader>mapleader<Leader>
        
            Expands to the value of the "mapleader" variable in key mapping. If
            "mapleader" is unset or empty then \ is used. Example:
        
        :map h :echo "Hello"
        works like
        :map \h :echo "Hello"
        but after
        let mapleader = ","
        it works like
        :map ,h :echo "Hello"
    


abbreviationsAbbreviations


    Vimperator can automatically replace words identified as abbreviations,
    which may be used to save typing or to correct commonly misspelled
    words. An abbreviation can be one of three types that are defined by the
    types of constituent characters. Whitespace and quotes are non-keyword
    types, and all other characters are keyword types.



    A "full-id" abbreviation consists entirely of keyword characters (e.g., "teh", "msoft").
    An "end-id" abbreviation ends in keyword character but otherwise contains all non-keyword characters (e.g., "'i").
    A "non-id" abbreviation ends in a non-keyword character but otherwise contains any non-whitespace character (e.g., "def'").



    Strings that cannot be abbreviations include "a'b" and "a b".



    An abbreviation is recognized when a space, quote character, or
    <C-]> is typed after the abbreviation. There are no default
    abbreviations, and abbreviations are never recursive.


:ab:abbreviate:ab[breviate] [-j[avascript]] {lhs} {rhs}:ab[breviate] {lhs}:ab[breviate]
        
            Define an abbreviation. Expand {lhs} to {rhs}.
            If [-javascript] is given and {rhs} contains JavaScript code,
            {rhs} will be expanded to the result of the JavaScript code.
            If only {lhs} is given, list all abbreviations that start with {lhs}.
            If no arguments are given, list all abbreviations.
        
    


:ca:cabbrev:ca[bbrev] [-j[avascript]] {lhs} {rhs}:ca[bbrev] {lhs}:ca[bbrev]
        
            Define an abbreviation for Command-line mode. Same as :abbreviate,
            but for Command-line mode only.
        
    


:ia:iabbrev:ia[bbrev] [-j[avascript]] {lhs} {rhs}:ia[bbrev] {lhs}:ia[bbrev]
        
            Define an abbreviation for Insert mode. Same as :abbreviate but
            for Insert mode only.
        
    


:una:unabbreviate:una[bbreviate] {lhs}
        Remove an abbreviation.
    


:cuna:cunabbrev:cuna[bbrev] {lhs}
        
            Remove an abbreviation for Command-line mode. Same as :unabbreviate,
            but for Command-line mode only.
        
    


:iuna:iunabbrev:iuna[bbrev] {lhs}
        
            Remove an abbreviation for Insert mode. Same as :unabbreviate but for
            Insert mode only.
        
    


:abc:abclear:abc[lear]
        Remove all abbreviations.
    


:cabc:cabclear:cabc[lear]
        Remove all abbreviations for Command-line mode.
    


:iabc:iabclear:iabc[lear]
        Remove all abbreviations for Insert mode.
    


user-commandsUser-defined commands

:com:command:com[mand]
        List all user-defined commands.
    


:com[mand] {cmd}
        List all user-defined commands that start with {cmd}.
    


:com[mand][!] [{attr}＃] {cmd} {rep}
        
            Define a new user command. The name of the command is {cmd} and its replacement
            text is {rep}. The command's attributes are {attr}. If a command with this name
            already exists an error is reported unless [!] is specified, in which case the
            command is redefined. Unlike Vim, the command may start with a lowercase
            letter.
        

        
            The command's behavior can be specified by providing attributes when the
            command is defined.
        

        :command-nargs
            Argument handling
        

        
            By default user commands accept no arguments. This can be changed by specifying
            the -nargs attribute.
        

        The valid values are:

        -nargs=0No arguments are allowed (default)-nargs=1One argument is allowed-nargs=*Zero or more arguments are allowed-nargs=?Zero or one argument is allowed-nargs=+One or more arguments are allowed

        :command-complete
            Argument completion
        

        
            Completion for arguments to user defined commands is not available by default.
            Completion can be enabled by specifying one of the following arguments to the
            -complete option when defining the command.
        

        altstylealternate author style sheetsbookmarkbookmarksbufferbufferscolorcolor schemescommandEx commandsdialogFirefox dialogsdirdirectoriesenvironmentenvironment variableseventautocommand eventsfilefileshelphelp tagshighlighthighlight groupshistoryhistoryjavascriptJavaScript expressionsmacronamed macrosmappinguser mappingsmenumenu itemsoptionVimperator optionspreferenceFirefox preferencessearchsearch engines and keywordsshellcmdshell commandssidebarsidebar panelsurlURLsusercommanduser commandscustom,{func}custom completion, provided by {func}

        :command-completion-custom
            Custom completion
        

        
            Custom completion can be provided by specifying the custom,{func} argument to
            -complete. The {func} is called with two arguments, a completion context, and
            an object describing the command's arguments. It should set the context's
            completions property, or return an object, with items and start
            properties, describing the completions and where the replacement is to start.
        

        
            start is the index into the word being completed at which the returned values
            should be applied and completions is a two dimensional array of the form:
            [[arg1, description1], [arg2, description2], ＃]
        

        

        :command-count
            Count handling
        

        
            By default user commands do not accept a count. Use the -count attribute if
            you'd like to have a count passed to your user command. This will then be
            available for expansion as <count> in the argument.
        

        :command-bang
            Special cases
        

        
            By default a user command does not have a special version, i.e. a version
            executed with the ! modifier. Providing the -bang attribute will enable this
            and <bang> will be available in the argument.
        

        :command-description
            Command description
        

        
            The command's description text can be set with -description. Otherwise it will
            default to "User-defined command".
        

        :command-replacement-text
            Replacement text
        

        
            The replacement text {rep} is scanned for escape sequences and these are
            replaced with values from the user-entered command line. The resulting string
            is then executed as an Ex command.
        

        The valid escape sequences are:

        <args>The command arguments exactly as supplied<count>Any supplied count, e.g. 5<bang>! if the command was executed with the ! modifier<lt>
                A literal '<' character to allow for a literal copy of one
                of the escape sequences. E.g., <lt>args> will expand to a
                literal <args>
            

        
            "q-" can be prefixed to the escape sequence so that the value is quoted, making
            it suitable for expression evaluation. Example: <q-args>
        
    


:comc:comclear:comc[lear]
        Delete all user-defined commands.
    


:delc:delcommand:delc[ommand] {cmd}
        Delete the user-defined command {cmd}.
    


command-examplesExamples

Add a :Google command to search via google:
:command -nargs=* Google open google <args>