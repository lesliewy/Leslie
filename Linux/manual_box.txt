apt-命令

命令 	作用
apt-cache search package 	搜索包

apt-cache show package 	获取包的相关信息，如说明、大小、版本等

apt-cache depends package 	了解使用依赖

apt-cache rdepends package 	了解某个具体的依赖

sudo apt-get install package 	安装包

sudo apt-get install package - - reinstall 	重新安装包

sudo apt-get -f install 	强制安装

sudo apt-get remove package 	删除包

sudo apt-get remove package - - purge 	删除包，包括删除配置文件等

sudo apt-get autoremove 	自动删除不需要的包

sudo apt-get update 	更新源

sudo apt-get upgrade 	更新已安装的包

sudo apt-get dist-upgrade 	升级系统

sudo apt-get dselect-upgrade 	使用 dselect 升级

sudo apt-get build-dep package 	安装相关的编译环境

apt-get source package 	下载该包的源代码

sudo apt-get clean && sudo apt-get autoclean 	清理下载文件的存档

sudo apt-get check 	检查是否有损坏的依赖

=============================================================================================================================================================
 dpkg
普通 dpkg 用法
dpkg -i 安装一个Debian包裹文件，如你手动下载的文件。
dpkg -c 列出的内容。
dpkg -I 从中提取包裹信息。
dpkg -r 移除一个已安装的包裹。
dpkg -L 列出 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。==可以查看软件的安装目录

dpkg -l |grep manpages         : 查看安装的manpages包的信息
dpkg -L manpages-dev           : 查看包manpages-dev的安装路径
dpkg -s manpages-dev           : 查看已安装的包manpages-dev的信息,该包必须先安装好
apt-cache show manpages-dev    : 查看包manpages-dev的信息,该包可以没有安装.

dpkg -P
完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。
dpkg -s
显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。
dpkg-reconfigure
重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。你能够重新配制 debconf 它本身，如你想改变它的前端或提问的优先权。例如，重新配制 debconf，使用一个 dialog 前端，简单运行：dpkg-reconfigure –frontend=dialog debconf (如果你安装时选错了，这里可以改回来哟：)

echo ” hold” | dpkg –set-selections 设置的状态为 hlod (命令行方式)
dpkg –get-selections “” 取得的当前状态 (命令行方式)

支持通配符，如：
Debian:~# dpkg –get-selections *wine*
libwine hold
libwine-alsa hold
libwine-arts hold
libwine-dev hold
libwine-nas hold
libwine-print hold
libwine-twain hold
wine hold
wine+ hold
wine-doc hold
wine-utils hold

例如：
大家现在用的都是 gaim-0.58 + QQ-plugin，为了防止 gaim 被升级，我们可以采用如下方法：
方法一：
Debian:~# echo “gaim hold” | dpkg –set-selections
然后用下面命令检查一下：
Debian:~# dpkg –get-selections “gaim”
gaim hold
现在的状态标志是 hold，就不能被升级了。

如果想恢复怎么办呢?
Debian:~# echo “gaim install” | dpkg –set-selections
Debian:~# dpkg –get-selections “gaim”
gaim install
这时状态标志又被重置为 install，可以继续升级了。

同志们会问，哪个这些状态标志都写在哪个文件中呢?
在 /var/lib/dpkg/status 里，你也可以通过修改这个文件实现 hold。

有时你会发现有的软件状态标志是 purge，不要奇怪。
如：事先已经安装了 amsn，然后把它卸了。
apt-get remove –purge amsn
那么状态标志就从 install 变成 purge。

方法二：
在/etc/apt 下手动建一个 preferences 文件
内容：
Package: gaim
Pin: version 0.58*
保存

dpkg -S
在包裹数据库中查找 ，并告诉你哪个包裹包含了这个文件。(注：查找的是事先已经安装的包裹)
1,rar命令

安装rar后 (sudo apt-get install rar),可以使用man rar 查看完整版的 

rar x arm.rar全路径解压
用法:   rar <命令> -<选项1> ….-<选项N>   <操作文档>    <文件…> <@文件列表…> <解压路径>

通常rar命令由一个主命令加若干选项（可选）构成，操作文档为操作施加的.rar文件对象，
文件或文件列表为对操作文档实现修饰的具体文件或目录（可选）。

============================================================================================================================================================
rar常用命令主要有
a 添加文件到操作文档
例:rar a test.rar file1.txt 若test.rar文件不存在，则打包file1.txt文件成test.rar
    例:rar a test.rar file2.txt 若test.rar文件已经存在，则添加file2.txt文件到test.rar中
    (这样test.rar中就有两个文件了）
    注，如果操作文档中已有某文件的一份拷贝，则a命令更新该文件，对目录也可以进行操作
   例:rar a test.rar dir1

c 对操作文档添加说明注释
   rar c test.rar
    （会出现Reading comment from stdin字样，然后输入一行或多行注释，以ctrl+d结束）
    cf 添加文件注释，类似上面的c，不过这个是对压缩文档中每个文件进行注释

    cw 将文档注释写入文件
    例:rar cw test.rar comment.txt

d 从文档中删除文件
    例:rar d test.rar file1.txt

e 将文件解压到当前目录
   例:rar e test.rar
    注:用e解压的话，不仅原来的file1.txt和file2.txt被解压到当前目录，就连dir1里面的所有文件
    也被解压到当前目录下，不能保持压缩前的目录结构，如果想保持压缩前的目录结构，用x解压

k 锁定文档
   例:rar k test.rar 锁定文档后，该文档就无法进行任何更新操作了

r 修复文档
   例:rar r test.rar
     当rar文件有问题时，可以尝试用该命令进行修复（鬼知道有多少用）

s 转换文档成自解压文档
   例:rar s test.rar
    会生成一个test.sfx的可执行文档，运行它的效果就相当于rar x test.rar，
    适合于向没有rar的用户传输文件

t 检测文档
   例:rar t test.rar
    检测test.rar的完整性，一般压缩完大型文件准备传输前最好用这个命令来确保文件的正确性

x 带路径解压文档中内容到当前目录
   例:rar x test.rar
    这样解压的话，dir1就会保持原来的目录结构

以上就是rar的常用命令，一个rar操作只能有一个命令，而选项却可以有多个。
------------------------------------------------------------------------
rar选项有很多，在此无法一一说明，只示范经常使用的几个

cl 将文件名转换为小写
cu 将文件名转换为大写
   例:rar a -cl test.rar FILe.txt
     FILe.txt在添加进test.rar之后，变为file.txt

df 文档操作后删除源文件
    例:rar a -df test.rar file1.txt file2.txt dir1
     将file1.txt,file2.txt,dir1压缩到test.rar中之后，删除源文件

ed 不添加空目录
    例:rar a -ed test.rar dir1
     添加dir1到test.rar中时，不对空目录进行操作
     rar e -ed test.rar
     解压test.rar时，不生成空目录

k 锁定文件
   例:rar a -k test.rar file1.txt
    等价于rar a test.rar file1.txt
          rar k test.rar

m<0..5> 设定压缩比等级（0-存储，3-默认，5-最大）
   例:rar a -m0 test.rar dir1 dir2
    将dir1,dir2打包存储到test.rar，不进行实质上的压缩（速度奇快，适合于对无甚可压的文件进行操作
    比如avi，jpg等）
    rar a -m5 test.rar *.txt *.bmp
    将当前目录下的txt文件和bmp文件打包压缩到test.rar中，使用最大压缩比（最慢）

ms[ext;ext] 特定文件采用非压缩方式
   例:rar a -m5 -ms avi;jpg;jpeg test.rar /home
    将home目录下所有目录和文件归档到test.rar，采用最大压缩，但avi,jpg,jpeg文件不进行压缩
    （只是打包进test.rar，因为这些文件即使用最大压缩也压不了多少，不如直接打包节省时间）

o+ 覆盖已有文件
o- 不覆盖已有文件
   例:rar x -o- test.rar
    解压test.rar文件，但是如果碰到以存在的文件则不覆盖

ol 将符号链接以链接文件保存，而不是普通文件
ow 保存或者恢复文件所有者的信息（username,group)
这两个是*nix系统特有的命令，很容易理解吧
------------------------------------------------------------------------
p[password]   设定密码
   例:rar a test.rar *.txt -p prettygirl
    压缩文件设定密码为prettygirl，解压时无密码无法进行操作
    如果觉得明码密码太过暴露，可以使用
    rar a test.rar *.txt -p
    则rar程序会询问你要使用什么密码，不回显

s- 不使用固实压缩
    注，固实压缩就是压缩后文档内容不可变更的压缩方式，这和lock不一样。因为使用普通压缩
        要照顾以后的插入删除个别文件的需要，就要留下很多操作余地。而固实压缩则不可以对
        其内容进行任何更新，所以压缩比是最大的。

sfx[name] 创建自解压文件，这和先用a进行压缩，再用s转换效果是一样的。

t 压缩完毕后进行完整性检验
   例:rar a test.rar /home -t
    压缩完毕后进行检验，如果有问题则报错。

ta<date> 仅对data日期后文件进行操作
tb<date> 仅对data日期前文件进行操作
    注，date的格式为 YYYYMMDDHHMMSS 这样。

v<size>[k,b] 分卷压缩，每卷大小由后面的size指定
   例:rar a -v15000k -m0 test xvid-fn.avi
    对xvid-fn.avi进行打包存储，每卷大小15000k（这种格式在网上发布dvdrip时很流行）
    生成的文件名为test.part1.rar,test.part2.rar….(rar 3.20版）

x<file> 排除特定的文件
   例:rar x test.rar -x *.txt
    解压test.rar中除*.txt以外的文档
x@<list> 同上，不过这次所有排除的文件放在list文件列表中

y 所有操作均回答yes
   例如有时解压时每碰到相同文件就问是否覆盖(Y/N)，加上-y就可以默认选择Yes，不再询问

============================================================================================================================================================
2, zip & unzip
   unzip -l file.zip                : 查看 zip 文件中的内容.
   unzip -v file.zip                : 查看 zip 文件中的内容，比-l显示的要多.
   unzip file.zip -d directory      : 将file.zip中的内容解压到directory目录,如果目录不存在，会自动创建.默认解压到当前目录.
   unzip -t file.zip                : 测试 file.zip,但不解压.

============================================================================================================================================================
help built-in  : 如 help cd ; help set ; help shopt  查看built-in command 帮助. 

1,使用内置的set和shopt命令设置bash选项
  set -x         : 使该脚本后面的命令和参数都输出,输出到文件方便调试.
  set +x         : 与 set -x 相反，停止输出其后的语句执行过程.
  set -f         : 禁止使用file glob, 类似ls f* 这种列出f开头的文件(目录)将不允许.   set +f 允许.

set命令可以用来定制shell环境，使用选项“o”来打开或者关闭选项。例如打开选项：set -o 选项，turn on;set +o 选项: turn off.
选项名 	      快捷开关 	含义
allexport 	-a 	从这个选项中被设置开始就自动标明要输出的新变量或修改过的变量，直至选项被复位
braceexpand 	-B 	打开花括号扩展，它是一个默认设置
emacs 	        	使用emacs内置编辑器进行命令行编辑，是一个默认设置
errexit 	-e 	当命令返回一个非零退出状态（失败）时退出。读取初始化文件时不设置
histexpand 	-H 	执行历史替换时打开!和!!扩展，是一个默认设置
history 	  	打开命令行历史、默认为打开
ignoreeof 	  	禁止用EOF(Ctrl+D)键退出shell。必须键入exit才能退出。等价于设置shell变量IGNOREEOF=10
keyword 	-k 	将关键字参数放到命令的环境中
interactive-comments 	  	对于交互式shell，把#符后面的文本作为注释
monitor 	-m 	设置作业控制
noclobber 	-C 	防止文件在重定向时被重写
noexec 	        -n 	读命令，但不执行。用来检查脚本的语法。交互式运行时不开启
noglob 	        -f 	禁止用路径名扩展。即关闭通配符.(shell 的3中通配符: ab* - ab开头的；ab? - ab开头，长度3位;ab[a-c] - aba/abb/abc
notify 	        -b 	后台作业完成时通知用户
nounset 	-u 	扩展一个未设置的变量时显示一个错误信息
onecmd 	        -t 	在读取和执行命令后退出
physical 	-P 	设置时，在键入cd或pwd禁止符号链接。用物理目录代替
privileged 	-p 	设置后，shell不读取.profile或ENV文件，且不从环境继承shell函数，将自动为setuid脚本开启特权
verbose 	-v 	为调试打开verbose模式
vi 	         	使用vi内置编辑器进行命令行编辑        // 该选项最好打开，个人喜欢vi 胜过 emacs: set -o vi
xtrace 	        -x 	为调试打开echo模式,输出结果前输出命令.

shopt命令是set命令的一种替代，很多方面都和set命令一样，但它增加了很多选项。可有使用“-p”选项来查看shopt选项的设置。“-u”开关表示一个复位的选项，“-s”表示选项当前被设置。
cdable_vars 	如果给cd内置命令的参数不是一个目录，就假设它是一个变量名，变量的值是将要转换到的目录.例如: APP_SVR_HOME 是指向/home/weblogic/bea/weblogic92的环境变量,cd APP_SVR_HOME 就会进入/home/weblogic/bea/weblogic92.
cdspell 	纠正cd命令中目录名的较小拼写错误。检查的错误包括颠倒顺序的字符，遗漏的字符以及重复的字符。如果知道一处修改，正确的路径就打印出，命令将继续。只用于交互式shell. 一个字母的大小写
checkhash 	bash在试图执行一个命令前，先在哈希表中寻找，以确定命令是否存在。如果命令不存在，就执行正常路径搜索
checkwinsize 	bash在每个命令后检查窗口大小，如果有必要，就更新LINES和COLUMNS的值
cmdhist 	bash试图将一个多行命令的所有行保存在同一个历史项中。这使得多行命令的重新编辑更方便
dotglob 	bash在文件名扩展的结果中包括以点（.）开头的文件名
execfail 	如果一个交互式shell不能执行指定给exec内置命令作为参数的文件，它不会退出。如果exec失败，一个交互式shell不会退出
expand_aliases 	别名被扩展。默认为打开
extglob 	打开扩展的模式匹配特征（正常的表达式元字符来自Korn shell的文件名扩展）
histappend 	当shell退出时，历史清单将添加到以HISTFILE变量的值命名的文件中，而不是覆盖文件
histreedit 	如果readline正被使用，用户有机会重新编辑一个失败的历史替换
histverify 	如果设置，且readline正被使用，历史替换的结果不会立即传递给shell解析器。而是将结果行装入readline编辑缓冲区中，允许进一步修改
hostcomplete 	如果设置，且readine正被使用，当正在完成一个包含@的词时bash将试图执行主机名补全。默认为打开
huponexit 	如果设置，当一个交互式登陆shell退出时，bash将发送一个SIGHUP（挂起信号）给所有的作业
interactive_comments 	在一个交互式shell中，允许以#开头的词以及同一行中其他的字符被忽略。默认为打开
lithist 	如果打开，且cmdhist选项也打开，多行命令将用嵌入的换行符保存到历史中，而无需在可能的地方用分号来分隔
mailwarn 	如果设置，且bash用来检查邮件的文件自从上次检查后已经被访问，将显示消息“The mail in mailfile has been read”
nocaseglob 	如果设置，当执行文件名扩展时，bash在不区分大小写的方式下匹配文件名
nullglob 	如果设置，bash允许没有匹配任何文件的文件名模式扩展成一个空串，而不是它们本身
promptvars 	如果设置，提示串在被扩展后再经历变量和参量扩展。默认为打开
restricted_shell 	如果shell在受限模式下启动就设置这个选项。该值不能被改变。当执行启动文件时，不能复位该选项，允许启动文件发现shell是否是受限的
sourcepath 	如果设置，source内置命令使用PATH的值来寻找包含作为参数提供的文件的目录。默认为打开
source 	点（.）的同义词
shift_verbose 	如果该选项设置，当移动计数超过位置参量个数时，shift内置命令将打印一个错误消息

====================================================================find===================================================================================
摘要： 本文是find 命令的详细说明，可贵的是针对参数举了很多的实例，大量的例证，让初学者更为容易理解；本文是zhyfly兄贴在论坛中；我对本文进行了再次整理，为方便大家阅读；

目录

版权声明
前言：关于find命令

一、find 命令格式

      1、find命令的一般形式为；
      2、find命令的参数；
      3、find命令选项；
      4、使用exec或ok来执行shell命令； 

二、find命令的例子；

      1、查找当前用户主目录下的所有文件；
      2、为了在当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件；
      3、为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径；
      4、查找/var/logs目录中更改时间在7日以前的普通文件，并在删除之前询问它们；
      5、为了查找系统中所有属于root组的文件；
      6、find命令将删除当目录中访问时间在7日以来、含有数字后缀的admin.log文件
      7、为了查找当前文件系统中的所有目录并排序；
      8、为了查找系统中所有的rmt磁带设备； 

三、xargs
四、find 命令的参数；

      1、使用name选项
      2、用perm选项
      3、忽略某个目录
      4、使用find查找文件的时候怎么避开某个文件目录
      5、使用user和nouser选项
      6、使用group和nogroup选项
      7、按照更改时间或访问时间等查找文件
      8、查找比某个文件新或旧的文件
      9、使用type选项
      10、使用size选项
      11、使用depth选项
      12、使用mount选项 

五、关于本文
六、相关文档


+++++++++++++++++++++++++++++++++++++++++++++++++
正文
+++++++++++++++++++++++++++++++++++++++++++++++++


版权声明

本文是zhyfly兄贴在LinuxSir.Org 的一个帖子而整理出来的，如果您对版权有疑问，请在本帖后面跟帖。谢谢；本文的HTML版本由北南南北整理；修改了整篇文档的全角及说明文字中的单词中每个字母空格的问题；为标题加了编号，方便大家阅读；

前言：关于find命令

由于find具有强大的功能，所以它的选项也很多，其中大部分选项都值得我们花时间来了解一下。即使系统中含有网络文件系统( NFS)，find命令在该文件系统中同样有效，只你具有相应的权限。

在运行一个非常消耗资源的find命令时，很多人都倾向于把它放在后台执行，因为遍历一个大的文件系统可能会花费很长的时间(这里是指30G字节以上的文件系统)。


一、find 命令格式


1、find命令的一般形式为；

find pathname -options [-print -exec -ok ...]


2、find命令的参数；

pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。
-print： find命令将匹配的文件输出到标准输出。
-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' {  } \;，注意{   }和\；之间的空格。
-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。

3、find命令选项
-name     按照文件名查找文件。
-perm     按照文件权限来查找文件。
-prune    使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。
-user     按照文件属主来查找文件。
-group    按照文件所属的组来查找文件。
-mtime -n +n     按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内，+ n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime 选项，但它们都和-m time选项。
-nogroup   查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。
-nouser    查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。
-newer file1 ! file2      查找更改时间比文件file1新但比文件file2旧的文件。
-type      查找某一类型的文件，诸如：
b - 块设备文件。
d - 目录。
c - 字符设备文件。
p - 管道文件。
l - 符号链接文件。
f - 普通文件。
-size n：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。
-depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。
-fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab中找到，该配置文件中包含了本系统中有关文件系统的信息。
-mount：在查找文件时不跨越文件系统mount点。
-follow：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。
-cpio：对匹配的文件使用cpio命令，将这些文件备份到磁带设备中。

另外,下面三个的区别:
   -amin n 　　查找系统中最后N分钟访问的文件
　　-atime n 　查找系统中最后n*24小时访问的文件
　　-cmin n　　查找系统中最后N分钟被改变文件状态的文件
　　-ctime n 　查找系统中最后n*24小时被改变文件状态的文件
   　-mmin n 　查找系统中最后N分钟被改变文件数据的文件
　　-mtime n 　查找系统中最后n*24小时被改变文件数据的文件

4、使用exec或ok来执行shell命令

使用find时，只要把想要的操作写在一个文件里，就可以用exec来配合find查找，很方便的

在有些操作系统中只允许-exec选项执行诸如l s或ls -l这样的命令。大多数用户使用这一选项是为了查找旧文件并删除它们。建议在真正执行rm命令删除文件之前，最好先用ls命令看一下，确认它们是所要删除的文件。

exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\，最后是一个分号。为了使用exec选项，必须要同时使用print选项。如果验证一下find命令，会发现该命令只输出从当前路径起的相对路径及文件名。

例如：为了用ls -l命令列出所匹配到的文件，可以把ls -l命令放在find命令的-exec选项中

# find . -type f -exec ls -l {  } \;
-rw-r--r--    1 root     root        34928 2003-02-25  ./conf/httpd.conf
-rw-r--r--    1 root     root        12959 2003-02-25  ./conf/magic
-rw-r--r--    1 root     root          180 2003-02-25  ./conf.d/README

上面的例子中，find命令匹配到了当前目录下的所有普通文件，并在-exec选项中使用ls -l命令将它们列出。
在/logs目录中查找更改时间在5日以前的文件并删除它们：

$ find logs -type f -mtime +5 -exec rm {  } \;

记住：在shell中用任何方式删除文件之前，应当先查看相应的文件，一定要小心！当使用诸如mv或rm命令时，可以使用-exec选项的安全模式。它将在对每个匹配到的文件进行操作之前提示你。

在下面的例子中， find命令在当前目录中查找所有文件名以.LOG结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。

$ find . -name "*.conf"  -mtime +5 -ok rm {  } \;
< rm ... ./conf/httpd.conf > ? n

按y键删除文件，按n键不删除。

任何形式的命令都可以在-exec选项中使用。

在下面的例子中我们使用grep命令。find命令首先匹配所有文件名为“ passwd*”的文件，例如passwd、passwd.old、passwd.bak，然后执行grep命令看看在这些文件中是否存在一个sam用户。

# find /etc -name "passwd*" -exec grep "sam" {  } \;
sam:x:501:501::/usr/sam:/bin/bash


二、find命令的例子；


1、查找当前用户主目录下的所有文件：

下面两种方法都可以使用

$ find $HOME -print
$ find ~ -print


2、让当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件；

$ find . -type f -perm 644 -exec ls -l {  } \;


3、为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径；

$ find / -type f -size 0 -exec ls -l {  } \;


4、查找/var/logs目录中更改时间在7日以前的普通文件，并在删除之前询问它们；

$ find /var/logs -type f -mtime +7 -ok rm {  } \;


5、为了查找系统中所有属于root组的文件；

$find . -group root -exec ls -l {  } \;
-rw-r--r--    1 root     root          595 10月 31 01:09 ./fie1


6、find命令将删除当目录中访问时间在7日以来、含有数字后缀的admin.log文件。

该命令只检查三位数字，所以相应文件的后缀不要超过999。先建几个admin.log*的文件 ，才能使用下面这个命令

$ find . -name "admin.log[0-9][0-9][0-9]" -atime -7  -ok
rm {  } \;
< rm ... ./admin.log001 > ? n
< rm ... ./admin.log002 > ? n
< rm ... ./admin.log042 > ? n
< rm ... ./admin.log942 > ? n


7、为了查找当前文件系统中的所有目录并排序；

$ find . -type d | sort


8、为了查找系统中所有的rmt磁带设备；

$ find /dev/rmt -print


三、xargs

xargs - build and execute command lines from standard input

在使用find命令的-exec选项处理匹配到的文件时， find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。

find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。

在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高；

而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。

来看看xargs命令是如何同find命令一起使用的，并给出一些例子。

下面的例子查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件

#find . -type f -print | xargs file
./.kde/Autostart/Autorun.desktop: UTF-8 Unicode English text
./.kde/Autostart/.directory:      ISO-8859 text\
......

在整个系统中查找内存信息转储文件(core dump) ，然后把结果保存到/tmp/core.log 文件中：

$ find / -name "core" -print | xargs echo "" >/tmp/core.log

上面这个执行太慢，我改成在当前目录下查找

#find . -name "file*" -print | xargs echo "" > /temp/core.log
# cat /temp/core.log
./file6

在当前目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限：

# ls -l
drwxrwxrwx    2 sam      adm          4096 10月 30 20:14 file6
-rwxrwxrwx    2 sam      adm             0 10月 31 01:01 http3.conf
-rwxrwxrwx    2 sam      adm             0 10月 31 01:01 httpd.conf

# find . -perm -7 -print | xargs chmod o-w
# ls -l
drwxrwxr-x    2 sam      adm          4096 10月 30 20:14 file6
-rwxrwxr-x    2 sam      adm             0 10月 31 01:01 http3.conf
-rwxrwxr-x    2 sam      adm             0 10月 31 01:01 httpd.conf

用grep命令在所有的普通文件中搜索hostname这个词：

# find . -type f -print | xargs grep "hostname"
./httpd1.conf:#     different IP addresses or hostnames and have them handled by the
./httpd1.conf:# VirtualHost: If you want to maintain multiple domains/hostnames
on your

用grep命令在当前目录下的所有普通文件中搜索hostnames这个词：

# find . -name \* -type f -print | xargs grep "hostnames"
./httpd1.conf:#     different IP addresses or hostnames and have them handled by the
./httpd1.conf:# VirtualHost: If you want to maintain multiple domains/hostnames
on your

注意，在上面的例子中， \用来取消find命令中的*在shell中的特殊含义。

find命令配合使用exec和xargs可以使用户对所匹配到的文件执行几乎所有的命令。


四、find 命令的参数

下面是find一些常用参数的例子，有用到的时候查查就行了，像上面前几个贴子，都用到了其中的的一些参数，也可以用man或查看论坛里其它贴子有find的命令手册


1、使用name选项

文件名选项是find命令最常用的选项，要么单独使用该选项，要么和其他选项一起使用。

可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来。

不管当前路径是什么，如果想要在自己的根目录$HOME中查找文件名符合*.txt的文件，使用~作为 'pathname'参数，波浪号~代表了你的$HOME目录。

$ find ~ -name "*.txt" -print

想要在当前目录及子目录中查找所有的‘ *.txt’文件，可以用：

$ find . -name "*.txt" -print

想要的当前目录及子目录中查找文件名以一个大写字母开头的文件，可以用：

$ find . -name "[A-Z]*" -print

想要在/etc目录中查找文件名以host开头的文件，可以用：

$ find /etc -name "host*" -print

想要查找$HOME目录中的文件，可以用：

$ find ~ -name "*" -print 或find . -print

要想让系统高负荷运行，就从根目录开始查找所有的文件。

$ find / -name "*" -print

如果想在当前目录查找文件名以两个小写字母开头，跟着是两个数字，最后是.txt的文件，下面的命令就能够返回名为ax37.txt的文件：

$find . -name "[a-z][a-z][0--9][0--9].txt" -print


2、用perm选项

按照文件权限模式用-perm选项,按文件权限模式来查找文件的话。最好使用八进制的权限表示法。

如在当前目录下查找文件权限位为755的文件，即文件属主可以读、写、执行，其他用户可以读、执行的文件，可以用：

$ find . -perm 755 -print

还有一种表达方法：在八进制数字前面要加一个横杠-，表示都匹配，如-007就相当于777，-006相当于666

# ls -l
-rwxrwxr-x    2 sam      adm             0 10月 31 01:01 http3.conf
-rw-rw-rw-    1 sam      adm         34890 10月 31 00:57 httpd1.conf
-rwxrwxr-x    2 sam      adm             0 10月 31 01:01 httpd.conf
drw-rw-rw-    2 gem      group        4096 10月 26 19:48 sam
-rw-rw-rw-    1 root     root         2792 10月 31 20:19 temp

# find . -perm 006
# find . -perm -006
./sam
./httpd1.conf
./temp

-perm mode:文件许可正好符合mode

-perm +mode:文件许可部分符合mode

-perm -mode: 文件许可完全符合mode

-- find /usr/bin -perm /u=s            : 查找/usr/bin目录下, 文件属主具有s的文件, 只要具有s就可以. 

3、忽略某个目录

如果在查找文件时希望忽略某个目录，因为你知道那个目录中没有你所要查找的文件，那么可以使用-prune选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略。

如果希望在/apps目录下查找文件，但不希望在/apps/bin目录下查找，可以用：

$ find /apps -path "/apps/bin" -prune -o -print


4、使用find查找文件的时候怎么避开某个文件目录

比如要在/usr/sam目录下查找不在dir1子目录之内的所有文件

find /usr/sam -path "/usr/sam/dir1" -prune -o -print

find [-path ..] [expression] 在路径列表的后面的是表达式

-path "/usr/sam" -prune -o -print 是 -path "/usr/sam" -a -prune -o -print 的简写表达式按顺序求值, -a 和 -o 都是短路求值，与 shell 的 && 和 || 类似如果 -path "/usr/sam" 为真，则求值 -prune , -prune 返回真，与逻辑表达式为真；否则不求值 -prune，与逻辑表达式为假。如果 -path "/usr/sam" -a -prune 为假，则求值 -print ，-print返回真，或逻辑表达式为真；否则不求值 -print，或逻辑表达式为真。

这个表达式组合特例可以用伪码写为

if -path "/usr/sam"  then
          -prune
else
          -print

避开多个文件夹

find /usr/sam \( -path /usr/sam/dir1 -o -path /usr/sam/file1 \) -prune -o -print

圆括号表示表达式的结合。
\ 表示引用，即指示 shell 不对后面的字符作特殊解释，而留给 find 命令去解释其意义。

查找某一确定文件，-name等选项加在-o 之后

#find /usr/sam  \(-path /usr/sam/dir1 -o -path /usr/sam/file1 \) -prune -o -name "temp" -print


5、使用user和nouser选项

按文件属主查找文件，如在$HOME目录中查找文件属主为sam的文件，可以用：

$ find ~ -user sam -print

在/etc目录下查找文件属主为uucp的文件：

$ find /etc -user uucp -print

为了查找属主帐户已经被删除的文件，可以使用-nouser选项。这样就能够找到那些属主在/etc/passwd文件中没有有效帐户的文件。在使用-nouser选项时，不必给出用户名； find命令能够为你完成相应的工作。

例如，希望在/home目录下查找所有的这类文件，可以用：
$ find /home -nouser -print


6、使用group和nogroup选项

就像user和nouser选项一样，针对文件所属于的用户组， find命令也具有同样的选项，为了在/apps目录下查找属于gem用户组的文件，可以用：

$ find /apps -group gem -print

要查找没有有效所属用户组的所有文件，可以使用nogroup选项。下面的find命令从文件系统的根目录处查找这样的文件

$ find / -nogroup-print


7、按照更改时间或访问时间等查找文件

如果希望按照更改时间来查找文件，可以使用mtime,atime或ctime选项。如果系统突然没有可用空间了，很有可能某一个文件的长度在此期间增长迅速，这时就可以用mtime选项来查找这样的文件。

用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。

希望在系统根目录下查找更改时间在5日以内的文件，可以用：

$ find / -mtime -5 -print

为了在/var/adm目录下查找更改时间在3日以前的文件，可以用：

$ find /var/adm -mtime +3 -print


8、查找比某个文件新或旧的文件

如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项。它的一般形式为：

newest_file_name ! oldest_file_name                 等同于       newest_file_name -a ! oldest_file_name        -a 相当于 and

其中，！是逻辑非符号。

查找更改时间比文件sam新但比文件temp旧的文件：

例：有两个文件

-rw-r--r--    1 sam      adm             0 10月 31 01:07 fiel
-rw-rw-rw-    1 sam      adm         34890 10月 31 00:57 httpd1.conf
-rwxrwxr-x    2 sam      adm             0 10月 31 01:01 httpd.conf
drw-rw-rw-    2 gem      group        4096 10月 26 19:48 sam
-rw-rw-rw-    1 root     root         2792 10月 31 20:19 temp

# find -newer httpd1.conf  ! -newer temp -ls
1077669    0 -rwxrwxr-x   2 sam      adm             0 10月 31 01:01 ./httpd.conf
1077671    4 -rw-rw-rw-   1 root     root         2792 10月 31 20:19 ./temp
1077673    0 -rw-r--r--   1 sam      adm             0 10月 31 01:07 ./fiel

查找更改时间在比temp文件新的文件：

$ find . -newer temp -print


9、使用type选项

在/etc目录下查找所有的目录，可以用：

$ find /etc -type d -print

在当前目录下查找除目录以外的所有类型的文件，可以用：
$ find . ! -type d -print

在/etc目录下查找所有的符号链接文件，可以用
$ find /etc -type l -print


10、使用size选项

可以按照文件长度来查找文件，这里所指的文件长度既可以用块（block）来计量，也可以用字节来计量。以字节计量文件长度的表达形式为N c；以块计量文件长度只用数字表示即可。

在按照文件长度查找文件时，一般使用这种以字节表示的文件长度，在查看文件系统的大小，因为这时使用块来计量更容易转换。
在当前目录下查找文件长度大于1 M字节的文件：
$ find . -size +1000000c -print

在/home/apache目录下查找文件长度恰好为100字节的文件：

$ find /home/apache -size 100c -print

在当前目录下查找长度超过10块的文件（一块等于512字节）：

$ find . -size +10 -print


11、使用depth选项

在使用find命令时，可能希望先匹配所有的文件，再在子目录中查找。使用depth选项就可以使find命令这样做。这样做的一个原因就是，当在使用find命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。

在下面的例子中， find命令从文件系统的根目录开始，查找一个名为CON.FILE的文件。

它将首先匹配所有的文件然后再进入子目录中查找。

$ find / -name "CON.FILE" -depth -print


12、使用mount选项

在当前的文件系统中查找文件（不进入其他文件系统），可以使用find命令的mount选项。

从当前目录开始查找位于本文件系统中文件名以XC结尾的文件：

$ find . -name "*.XC" -mount -print



五、关于本文

本文是find 命令的详细说明，可贵的是针对参数举了很多的实例，大量的例证，让初学者更为容易理解；本文是zhy2111314兄贴在论坛中；我对本文进行了再次整理，为方便大家阅读； ── 北南南北

六、相关文档

    * 由 北南南北 在 2005/12/20 - 10:24 发表
    * Linux
    * 基础知识
    * 命令/SHELL/PERL
    * 要发表评论，请先登录 或 注册

-exec 和 管道符

用 -exec来执行shell命令，和通过管道符|来执行有什么不同？

    * 由 li_qinshan 在 2008/10/15 - 18:05 发表
    * 要发表评论，请先登录 或 注册

可不可以忽略 Permission denied的

-bash-3.1$ find /home/f/a -type f -name enen -exec ls -l {} \;
find: /home/f/a/liuyunge: Permission denied
find: /home/f/a/ll1012: Permission denied
find: /home/f/a/hebaidu: Permission denied
find: /home/f/a/ET_SUN: Permission denied
find: /home/f/a/Rory.Lu: Permission denied
-rw-r--r-- 1 lufeng 27108 60 Nov 1 14:24 /home/f/a/lufeng/enen
find: /home/f/a/shenglee2007: Permission denied
find: /home/f/a/zlh750620: Permission denied
find: /home/f/a/mlh720goodboy: Permission denied

    * 由 LinuxSir 在 2007/11/03 - 10:20 发表
    * 要发表评论，请先登录 或 注册

-mtime +n

-mtime +n -n

"用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件"

疑问：用加号+来限定更改时间在距今 (n+1) 日以前的文件

    * 由 LinuxSir 在 2007/03/06 - 15:33 发表
    * 要发表评论，请先登录 或 注册

very good.Thanks

very good.Thanks

    * 由 zywsdu 在 2006/09/29 - 12:04 发表
    * 要发表评论，请先登录 或 注册

很好的文章

谢谢，又学到一些东西

    * 由 LinuxSir 在 2006/09/13 - 20:00 发表
    * 要发表评论，请先登录 或 注册

非常感谢，很实用的文档

非常感谢，很实用的文档，对俺很有帮助哟。

    * 由 Anonymous (未验证) 在 2006/08/29 - 16:49 发表
    * 要发表评论，请先登录 或 注册

如-007就相当于777，-006相当于666 有误

-007应该是至少007的意思：如：407，447 etc

    * 由 LinuxSir 在 2006/01/22 - 19:58 发表
    * 要发表评论，请先登录 或 注册

man，find有详细的例子，-007是的确至少007的意思

我查看了man，find有详细的例子，-007是的确至少007的意思。
而且 -perm +mode 是老的用法，新用法是 find -perm /mode.手册上说他们作用是一样的。

    * 由 Anonymous (未验证) 在 2006/09/10 - 22:12 发表
    * 要发表评论，请先登录 或 注册

-exec后边的{}有问题

{}之间没有空格吧.页面上的命令有空格,复制粘贴后是错误的.

    * 由 LinuxSir 在 2005/12/26 - 20:23 发表
    * 要发表评论，请先登录 或 注册

这里的确有问题

debian:~# find /usr/bin -type f -size -50c -exec 'ls -l' {} ;
find: missing argument to `-exec'

debian:~# find /usr/bin -type f -size -50c -exec ls -l '{}' ';'
-rwxr-xr-x 1 root root 30 2003-11-08 21:31 /usr/bin/rgrep
-rwxr-xr-x 1 root root 29 2004-11-22 14:09 /usr/bin/bison.yacc
-rwxr-xr-x 1 root root 48 2005-09-04 15:20 /usr/bin/pydoc2.3
-rwxr-xr-x 1 root root 32 2005-05-16 19:02 /usr/bin/gnome-sudo

debian:~# find /usr/bin -type f -size -50c -exec ls -l '{}' \;
-rwxr-xr-x 1 root root 30 2003-11-08 21:31 /usr/bin/rgrep
-rwxr-xr-x 1 root root 29 2004-11-22 14:09 /usr/bin/bison.yacc
-rwxr-xr-x 1 root root 48 2005-09-04 15:20 /usr/bin/pydoc2.3
-rwxr-xr-x 1 root root 32 2005-05-16 19:02 /usr/bin/gnome-sudo

debian:~# find /usr/bin -type f -size -50c -exec ls -l \{\} \;
-rwxr-xr-x 1 root root 30 2003-11-08 21:31 /usr/bin/rgrep
-rwxr-xr-x 1 root root 29 2004-11-22 14:09 /usr/bin/bison.yacc
-rwxr-xr-x 1 root root 48 2005-09-04 15:20 /usr/bin/pydoc2.3
-rwxr-xr-x 1 root root 32 2005-05-16 19:02 /usr/bin/gnome-sudo

在用-exec的时候，command不能用''，而{}和;必须用''，或者\转义。

    * 由 LinuxSir 在 2006/07/23 - 11:31 发表
    * 要发表评论，请先登录 或 注册

不错的文章

这样的实用实干的文章越多越好！

    * 由 LinuxSir 在 2005/12/23 - 01:04 发表
    * 要发表评论，请先登录 或 注册

非常奇怪的问题！！！！

在RHEL4下有文件：/lib/modules/2.6.9ELsmp/source/include/linux/version.h
但是为何用命令find / -name version.h
或者到目录：/lib/modules/2.6.9ELsmp/下
find . -name version.h
都无法找到上述文件。
但是在：/lib/modules/2.6.9ELsmp/source下
find . -name version.h
却可以找到这个文件。
不知是什么原因？？？？

    * 由 LinuxSir 在 2006/06/05 - 12:04 发表
    * 要发表评论，请先登录 或 注册

排版有误？

这么多&line; 应该是|吧

    * 由 LinuxSir 在 2005/12/20 - 18:53 发表
    * 要发表评论，请先登录 或 注册

谢谢，已经修复

谢谢，已经修复；

    * 由 北南南北 在 2005/12/20 - 19:10 发表
    * 要发表评论，请先登录 或 注册

改过了么？ 怎么还有line

7、为了查找当前文件系统中的所有目录并排序；

$ find . -type d &line;sort

    * 由 LinuxSir 在 2005/12/21 - 09:08 发表
    * 要发表评论，请先登录 或 注册

非常感谢，全部修正；

非常感谢，全部修正；

    * 由 北南南北 在 2005/12/21 - 10:54 发表
    * 要发表评论，请先登录 或 注册

在solaris下

在solaris下，不用也不能转义 直接使用 ...... -exec ls -l {} \; 即可.


记录
1, 指定查找深度
   find . -maxdepth 1 -name “abc*":                          只查找当前目录下的文件,目录下的文件不去查找.
   find /home/leslie -maxdepth 1 -name "abc*" :              只查找/home/leslie目录下的文件,而不进入目录查找。
   find . ! -name "." -type d -prune                        :输出当前目录下的所有目录. -prune表示:如果是目录则不向下查找.
   find . ! -name "." -type d -prune -o -print               :输出当前目录下的所文件，不递归查找. -print 表示输出文件名. 如果不是目录则输出文件名称. 
2, 查找无效符号连接
   find -L /home/mktdev/ -type l                            : 当符号连接无效时，才会查找连接本身.
   find . -maxdepth 1 -name "\.*"                           : 查找当前目录下所有隐藏文件.

=======================================================================grep================================================================================
1, grep '\<quiet\>' /proc/cmdline                           : 在cmdline中精确查找quiet单词，'<'和'>'是单词分界符.即quiet前后没有数字、_和字母.
   grep -E "^[123][34]5" b                                  : -E :extended regular expression,通常可以不加,默认是-G : Basic Regular Expression. 双引号也可以
                                                              不加，如果要 grep "^ " b 匹配开头有一个空格的则需要添加.
                                                              双引号不会使正则表达式转义.
   grep -F "text/html" b                                    : -F : fixed string.  但是不包括双引号和单引号. 查找b中 text/html 字符串.
   grep -F "\"text/html\"" b                                : 查找b中 "text/html" 字符串，包括双引号.


===================================================================color==================================================================================
To add colors to the shell prompt use the following export command syntax:
‘\e[x;ym $PS1 \e[m’
Where,
    \e[ Start color scheme
    x;y Color pair to use (x;y)
    $PS1 is your shell prompt
    \e[m Stop color scheme
To set a red color prompt, type the command:
$ export PS1="\e[0;31m[\u@\h \W]\$ \e[m "
List of Color code
Color 	Code
Black 	0;30
Blue 	0;34
Green 	0;32
Cyan 	0;36
Red 	0;31
Purple 	0;35
Brown 	0;33
Blue 	0;34
Green 	0;32
Cyan 	0;36
Red 	0;31
Purple 	0;35
Brown 	0;33

Replace digit 0 with 1 to get light color version.
