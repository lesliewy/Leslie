### nginx 的5个context: main context.

#user  nobody;
# 工作进程数，通常设置成CPU核数.
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# nginx master process 文件中是pid, 默认也会生成nginx.pid,  没有该文件执行nginx命令时会报错.
pid        logs/nginx.pid;


### events context
events {
    # 单个work_process 的最大连接数.
    worker_connections  1024;
}


#http {
    #include       mime.types;
    #default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    #keepalive_timeout  65;

    #gzip  on;

    #server {
    #    listen       8001;
    #    server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
    #    error_page   500 502 503 504  /50x.html;
    #    location = /50x.html {
    #        root   html;
    #    }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    #}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

#} aaa

### http context
http{
   #设定日志
   log_format  main  '[$remote_addr] - [$remote_user] [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
   access_log  logs/access.log main;
   rewrite_log     on;
   #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
   #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
   sendfile        on;


   #设定实际的服务器列表
   upstream zp_server1{
       server host.docker.internal:8082;
   }


   #设定负载均衡的服务器列表
   upstream load_balance_server {
       #weigth参数表示权值，权值越高被分配到的几率越大
       server 192.168.1.11:80   weight=5;
       server 192.168.1.12:80   weight=1;
       server 192.168.1.13:80   weight=6;
   }

   # 多个webapp 配置. 同一个应用有多个模块. 根据url来区分哪个模块.
    upstream product_server{
        server www.helloworld.com:8081;
    }

    upstream admin_server{
        server www.helloworld.com:8082;
    }

    upstream finance_server{
        server www.helloworld.com:8083;
    }

   server {
     # 如果没有listen, 默认端口 80
      listen 6050;
      # 定义使用哪个域名访问.
      server_name wy1.leslie.com wy2.leslie.com;
      # 首页
      index index.html;
#      root /data/;


      ##### 代理配置参数  
      proxy_connect_timeout 90;          #nginx跟后端服务器连接超时时间(代理连接超时)
      proxy_send_timeout 90;             #后端服务器数据回传时间(代理发送超时)
      proxy_read_timeout 90;             #连接成功后，后端服务器响应时间(代理接收超时)
      # nginx 会添加header, 发往后台应用. 应用中通过request.getHeader("host")来获取.
      proxy_set_header Host $host;
      proxy_set_header X-Forwarder-For $remote_addr;
      #####

      location / {
        # 作为代理服务器
        proxy_pass http://zp_server1; 
        # 只有服务端设置了domain, path 才可以修改.  修改的是后端应用返回的cookie
        proxy_cookie_domain ~.* .leslie.com;   
        proxy_cookie_path ~.* /;  
        #proxy_cookie_path /c1/abc "" # delete "/c1"
      } 

      # 静态文件, 如果静态文件不在应用中，而是直接放在机器上，可以在此配置，nginx 直接处理，避免流量进入应用.
      #location ~ ^/(images|javascript|js|css|flash|media|static)/ {
      #      root /data/views;
      #      #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。
      #      expires 30d;
      #}

      # 静态站点的话，不需要匹配url
      #location / {
      #    root /app/dist;
      #    index index.html;
      #}

      # 多webapp的配置
      #location / {
      #    proxy_pass http://product_server;
      #}
      #location /product/{
      #    proxy_pass http://product_server;
      #}
      #location /admin/ {
      #    proxy_pass http://admin_server;
      #}
      #location /finance/ {
      #    proxy_pass http://finance_server;
      #}

      #禁止访问 .htxxx 文件
      location ~ /\.ht {
         deny all;
      }
   }
   # 强制request中必须包含Host, 否则直接返回. server_name 相当于 ""
   server {
      listen 6050 default_server;
      return 444;
   }


   server {
      listen 6060;
      server_name wy2.leslie.com;   # 如果是本机, 需要配置hosts  127.0.0.1 wy2.leslie.com
      # 公共root.  用于没有指定root的location.
      root /data/;
      location / {
         proxy_cookie_domain wy2.leslie.com a.b;
         index index.html index.php;
      }
      location /bridge {
        proxy_cookie_domain wy2.leslie.com a.b;
        proxy_pass http://host.docker.internal:8082/ok.htm;   # 容器内访问宿主机端口, 需要宿主机启动应用.
      }
   }



}

### stream context
#stream {
#    # Configuration specific to TCP/UDP and affecting all virtual servers
#    server {
#        # configuration of TCP virtual server 1 
#    }
#}

### mail context
#mail{
#}
