# 运行用户
#user  nobody;
#启动进程,通常设置成和cpu的数量相等
worker_processes  1;

#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        logs/nginx.pid;

#工作模式及连接数上限
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    # use epoll;
    #单个后台worker process进程的最大并发链接数
    worker_connections  1024;
}


#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
    #设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    #设定日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


    access_log  logs/access.log  main;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用, 必须设为 on, 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    #连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #开启gzip压缩
    gzip  on;

    # nginx 作为反向代理实现负载均衡;
    # 设置负载均衡列表, 在下面的3台服务器上都有实际的web server， 这里做的是分发;  weight 表示权重;
    upstream mysvr {    
        # 根据的用户的ip, 进行hash运算,散列到后端服务器; 相同的ip散列到固定的服务器上：
        ip_hash;
        #weigth参数表示权值,权值越高被分配到的几率越大   
        server 192.168.207.129:80 weight=5;    
        server 192.168.207.130:8080 weight=5;    
        server 192.168.207.131:8080 weight=2;  
    } 

    server {
        #侦听8001端口
        listen       8001;
        #定义使用的访问名称;
        server_name  localhost;

        #charset koi8-r;

        #设定本虚拟主机的访问日志
        access_log  logs/host.access.log  main;

        #默认请求, 即输入: localhost:8001/  会输出 html/index.html 页面;
        location / {
            #定义服务器的默认网站根目录位置
            root   html;
            #定义首页索引文件的名称
            index  index.html index.htm;
        }
        # http://localhost:8001/myphptest/index1.html  访问的是 指定的root下面的index1.html, 如果没指定index1.html, 默认的是index 指定的文件；
        location /myphptest {
            root /home/leslie/Software/apache-tomcat-7.0.26/webapps;
            index index.html;
        }

         # 将所有请求转发到 http://localhost:8085, 可以用于反向代理;  http://localhost:8001/my/index1.html 将会被转到 http://localhost:8085/my/index1.html
        location ~ .*$ {
            proxy_pass http://localhost:8085;
        }

        # 定义错误提示页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        # 禁止访问 .htxxx 文件
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
